name: tests

defaults:
  run:
    shell: bash

on:
  push:
    branches: [ main ]
    paths-ignore: ['docs/**', '**.md']
  pull_request:
    branches: [ main ]
    paths-ignore: ['docs/**', '**.md']
  schedule:
    - cron: '0 13 * * 4'

jobs:
  precommit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v5.2.0
        with:
          python-version: "3.10"
      - run: |
          pip install pre-commit
          pre-commit clean
          pre-commit autoupdate
          pre-commit run --all-files
  
  url-check:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4.1.6
      - uses: urlstechie/urlchecker-action@master
        with:
          file_types: .md,.py,.json,.ipynb,.yaml,.yml,.jinja2,.toml
          print_all: false
          verbose: true
          timeout: 7
          retry_count: 3
          exclude_urls: https://www.gnu.org/licenses/gpl-3.0.html,https://open-atmos.github.io/PyMPDATA/\2/\3.html
          exclude_patterns: http://purl.org,http://www.w3.org
          exclude_files: docs/generate_html.py,.github/workflows/tests.yml
  
  pylint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
        fetch-depth: 0 
    - name: Set up Python
      uses: actions/setup-python@v5.2.0
      with:
        python-version: "3.10"
    - name: Set up MPI
      uses: mpi4py/setup-mpi@v1
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # TODO #411 https://github.com/pylint-dev/pylint/issues/9099
        pip install "pylint<3.0.0" nbqa
        pip install -r tests/devops_tests/requirements.txt
        pip install -e .[tests] -e ./examples[tests] -e. ./MPI[tests]
    - run: |
        pylint --unsafe-load-any-extension=y --max-module-lines=500 --disable=fixme $(git ls-files '*.py' | grep -v ^examples)
    - run: |
        # TODO #299
        pylint --disable=fixme --max-module-lines=200 \
               --disable=too-many-locals,too-many-branches,duplicate-code,invalid-name,missing-function-docstring,missing-module-docstring,too-many-arguments,missing-class-docstring,too-many-instance-attributes $(git ls-files '*.py' | grep ^examples)
    - run: |
        # TODO #299
        nbqa pylint --disable=fixme,trailing-whitespace,wrong-import-position,wrong-import-order,ungrouped-imports \
                    --disable=duplicate-code,invalid-name,missing-module-docstring,line-too-long,missing-function-docstring,redefined-outer-name,too-many-arguments,no-member,too-many-locals,cell-var-from-loop,missing-class-docstring $(git ls-files '*.ipynb')

  devops:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 0  # https://github.com/pypa/setuptools_scm/issues/480
      - run: pip install -r tests/devops_tests/requirements.txt
      - run: pip install -e . -e ./examples
      - env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: pytest --durations=10 -v -s -We -p no:unraisableexception -k "not run_notebooks" tests/devops_tests

  nojit_and_codecov:
    needs: [ precommit, pylint, devops, url-check ]
    strategy:
      matrix:
        python-version: ["3.10", "3.13"]
    runs-on: ubuntu-latest
    env:
      NUMBA_DISABLE_JIT: 1
      PYTHON: ${{ matrix.python-version }}
      MPI: 0
    steps:
      - uses: actions/checkout@master
        with:
          submodules: recursive
          fetch-depth: 0
      - uses: actions/setup-python@v5.2.0
        with:
          python-version: ${{ matrix.python-version }}
      - name: Generate coverage report
        run: |
          pip install -e .[tests] -e ./examples
          pip install pytest-cov
          pytest --durations=10 -We tests/unit_tests --cov-report=xml --cov=PyMPDATA
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          env_vars: PYTHON,MPI
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          verbose: true

  tests:
    needs: [nojit_and_codecov]
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-13, macos-14, windows-latest]
        python-version: ["3.10", "3.13"]
        exclude:
          - platform: macos-14
            python-version: "3.10"
    runs-on: ${{ matrix.platform }}
    timeout-minutes: ${{ startsWith(matrix.platform, 'windows-') && 115 || 90 }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 0

      - uses: actions/setup-python@v5.2.0
        with:
          python-version: ${{ matrix.python-version }}

      - run: |
          python -m pip install $PIP_INSTALL_ARGS -e .  # to check if usable without test/example dependencies
          python -We -c "import PyMPDATA"
          python -m pip install $PIP_INSTALL_ARGS -e .[tests] -e ./examples

      - if: startsWith(matrix.platform, 'ubuntu-')
        run: echo NUMBA_THREADING_LAYER=omp >> $GITHUB_ENV

      - env:
          NUMBA_OPT: 1
        run: |
          python -m pytest --durations=10 -p no:unraisableexception -We tests/unit_tests
          python -m pytest --durations=10 -p no:unraisableexception -We -k "not test_timing_3d" tests/smoke_tests

      - if: ${{!startsWith(matrix.platform, 'windows-')}}
        env:
          NUMBA_OPT: 3
        run: |
          python -m pytest --durations=10 -p no:unraisableexception -We -k "test_timing_3d" tests/smoke_tests

  examples:
    needs: [nojit_and_codecov]
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-13, macos-14, windows-latest]
        python-version: ["3.10", "3.13"]
      fail-fast: false
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 0

      - uses: actions/setup-python@v5.2.0
        with:
          python-version: ${{ matrix.python-version }}

      - run: python -m pip install $PIP_INSTALL_ARGS -e .[tests] -e ./examples
      - run: python -m pip install $PIP_INSTALL_ARGS -r tests/devops_tests/requirements.txt
      - if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get install libblitz0-dev libboost-thread-dev libboost-date-time-dev libboost-system-dev libboost-iostreams-dev libboost-timer-dev libboost-filesystem-dev
          git clone https://github.com/igfuw/libmpdataxx.git
          cd libmpdataxx/libmpdata++
          mkdir build
          cd build
          cmake ..
          sudo make install
          cd ../../../
          rm -rf libmpdataxx
      - uses: julia-actions/setup-julia@v2
      - run: julia --version

      # https://github.com/numba/numba/issues/6350#issuecomment-728174860
      - if: matrix.platform == 'ubuntu-latest'
        run: echo NUMBA_THREADING_LAYER=omp >> $GITHUB_ENV

      - env:
          NUMBA_OPT: 1
        run: python -m pytest --durations=10 -p no:unraisableexception -We tests/devops_tests/test_notebooks.py

      - if: ${{ matrix.platform == 'ubuntu-latest' && matrix.python-version == '3.13'}}
        run: |
          mkdir -p /home/runner/work/_temp/_github_home/figures
          rm /tmp/pytest-of-runner/pytest-current/test_run_notebooks_examples_Pycurrent
          mv /tmp/pytest-of-runner/pytest-current/test_run_notebooks_examples_*/boussinesq_2d_anim.gif /home/runner/work/_temp/_github_home/figures
          mv /tmp/pytest-of-runner/pytest-current/test_run_notebooks_examples_*/fig_4.svg /home/runner/work/_temp/_github_home/figures
          mv /tmp/pytest-of-runner/pytest-current/test_run_notebooks_examples_*/advection_diffusion.gif /home/runner/work/_temp/_github_home/figures
          mv /tmp/pytest-of-runner/pytest-current/test_run_notebooks_examples_*/wikipedia_example.gif /home/runner/work/_temp/_github_home/figures
          mv /tmp/pytest-of-runner/pytest-current/test_run_notebooks_examples_*/burgers.gif /home/runner/work/_temp/_github_home/figures

      # - if: ${{ failure() }}
      #   uses: mxschmitt/action-tmate@v3
      #   with:
      #     limit-access-to-actor: true

      - if: ${{ github.ref == 'refs/heads/main' && matrix.platform == 'ubuntu-latest' && matrix.python-version == '3.13'}}
        uses: eine/tip@master
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            /github/home/figures/*.svg
            /github/home/figures/*.gif

